import logging
from datetime import datetime
from os import getenv

from aiogram import types, filters

from main import dp, bot
from misc import pochta_delivery, barcode_response, retail_delivery_info, inline_kb_constructor, Url

admins = getenv("ADMINS").split()
admins.append(getenv("ADMIN"))


@dp.callback_query_handler(filters.Text(startswith='url'), user_id=admins)
async def process_callback_button_url(callback_query: types.CallbackQuery):
    code = callback_query.data
    url = Url(callback_query.message.text)
    await callback_query.message.delete()
    if code == 'url_short':
        await bot.send_message(callback_query.message.chat.id, url.shorten(), disable_web_page_preview=True)
    elif code == 'url_mini_desc':
        await bot.send_message(callback_query.message.chat.id, url.mini_description())
    logging.info(f'{datetime.now().strftime("%d.%m.%Y-%H:%M:%S")}'
                 f'-ADMIN-{callback_query.from_user.id}'
                 f'-{callback_query.from_user.full_name}'
                 f'-{"-url_short" if code == "url_short" else "-mini_description"}')


@dp.message_handler(filters.Regexp(r'(^\d{6}$)'), user_id=admins)
async def delivery_only_index(message: types.Message):
    """
        If User message is 6 digit return delivery days
    """
    delivery_response = await pochta_delivery(to_index=message.text)
    await message.answer(delivery_response)
    logging.info(f'{datetime.now().strftime("%d.%m.%Y-%H:%M:%S")}'
                 f'-ADMIN-{message.from_user.id}'
                 f'-{message.from_user.full_name}'
                 f'-delivery_time')


@dp.message_handler(filters.Regexp(r'^(\d{6})(\s{1,})(\d{3,})(\s{1,})(\d{4,})$'), user_id=admins)
async def delivery_index_price_weight(message: types.Message):
    """
        If User message is 6 digit index, 3+ digit weight, 4+ digit price return delivery days and price
    """
    to_index, weight, price = message.text.split()
    delivery_response = await pochta_delivery(to_index=to_index, weight=weight, price=price)
    await message.answer(delivery_response)
    logging.info(f'{datetime.now().strftime("%d.%m.%Y-%H:%M:%S")}'
                 f'-ADMIN-{message.from_user.id}'
                 f'-{message.from_user.full_name}'
                 f'-delivery_time_and_price')


@dp.message_handler(filters.Regexp(r'^(https?:\/\/)?([\w-]{1,32}\.[\w-]{1,32})[^\s@]*'), user_id=admins)
async def url_work(message: types.Message):
    """
        If message is URL, then choose url_short or product_description
    """
    kb_inl = await inline_kb_constructor({'–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É': 'url_short',
                                          '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ': 'url_mini_desc'})

    await message.answer(message.text, disable_web_page_preview=True, reply_markup=kb_inl)
    logging.info(f'{datetime.now().strftime("%d.%m.%Y-%H:%M:%S")}'
                 f'-ADMIN-{message.from_user.id}'
                 f'-{message.from_user.full_name}'
                 f'-url_work')


@dp.message_handler(content_types='photo', user_id=admins)
async def photo_process(message: types.Message):
    """
        –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –Ω–∞ —Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö–∫–æ–¥,
        –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –¥–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
    """
    file_id = message.photo[-1].file_id
    file_info = await bot.get_file(file_id)
    downloaded_file = await bot.download_file(file_info.file_path)
    track_number = await barcode_response(downloaded_file)
    if track_number:
        if track_number.type in ('–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏', '–°–î–≠–ö'):
            await message.answer(await retail_delivery_info(track_number))
        else:
            await message.answer(f"<code>{track_number.number}</code> - "
                                 f"–Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º –°–î–≠–ö –∏–ª–∏ –ü–æ—á—Ç—ã –†–æ—Å—Å–∏–∏")
    else:
        await message.answer('–®—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ')

    logging.info(f'{datetime.now().strftime("%d.%m.%Y-%H:%M:%S")}'
                 f'-ADMIN-{message.from_user.id}'
                 f'-{message.from_user.full_name}'
                 f'-barcode_response-{track_number.number if track_number else None}')


@dp.message_handler(commands=['start', 'help'], user_id=admins)
async def print_menu(message: types.Message):
    """
        This handler will be called when user sends `/start` or `/help` command
    """
    message_text = '–í–æ—Ç, —á—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:\n' \
                   '/start , /help - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n' \
                   '\n' \
                   'üåê –°–æ–∫—Ä–∞—â–∞—Ç–µ–ª—å —Å—Å—ã–ª–æ–∫ + –º–∏–Ω–∏ –æ–ø–∏—Å–∞–Ω–∏–µ:\n' \
                   '‚îú <code>https://carautostudio.ru/catalog/shtatnye_magnitoly/</code>\n' \
                   '‚îî –ø—Ä–∏—à–ª–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n' \
                   '\n' \
                   'üìÆ –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏\n' \
                   '‚îú <code>123456</code> - —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É \n' \
                   '‚îî <code>–∏–Ω–¥–µ–∫—Å –≤–µ—Å —Ü–µ–Ω–∞</code> - —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ü–æ—á—Ç—ã –∏ —Å—Ä–æ–∫–∏' \
                   '\n' \
                   'üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ—Å—ã–ª–æ–∫ –ü–æ—á—Ç–∞ —Ä–æ—Å—Å–∏–∏ –∏ –°–î–≠–ö:\n' \
                   '‚îú <code>1234578901234</code> - –¥–ª—è –ü–æ—á—Ç–æ–≤—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å 14 –∑–Ω–∞—á–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\n' \
                   '‚îî <code>RU123456789CH</code> - –¥–ª—è EMS –∏ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π c 13 –∑–Ω–∞—á–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏\n' \
                   '\n' \
                   '\n\n\n<b>–í–†–ï–ú–ï–ù–ù–û –ù–ï–î–û–°–¢–£–ü–ï–ù</b>üó∫\n' \
                   'üó∫Ô∏è –ê–¥—Ä–µ—Å:\n' \
                   '‚îú <code>–ú–æ—Å–∫–≤–∞ –ú–∞–Ω–µ–∂–Ω–∞—è –ø–ª–æ—â–∞–¥—å 1</code>\n' \
                   '‚îî —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å, –∏–Ω–¥–µ–∫—Å –∏ —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –ü–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏'

    await message.answer(message_text)
    logging.info(f'{datetime.now().strftime("%d.%m.%Y-%H:%M:%S")}'
                 f'-ADMIN-{message.from_user.id}'
                 f'-{message.from_user.full_name}'
                 f'-command-{message.text}')
