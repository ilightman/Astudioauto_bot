import io
import logging
from os import getenv

from aiogram import types, filters

from main import dp
from misc import pochta_delivery, inline_kb_constructor, Url, qr_response

admins = getenv("ADMINS").split()
admins.append(getenv("ADMIN"))


@dp.callback_query_handler(filters.Text(startswith='url'), user_id=admins)
async def process_callback_button_url(callback_query: types.CallbackQuery):
    code = callback_query.data
    url = Url(callback_query.message.text)
    await callback_query.message.delete()
    if code == 'url_short':
        url_s = await url.shorten()
        await callback_query.message.answer(f"{url_s}\n\n<code>{url_s}</code>\n –Ω–∞–∂–º–∏ ^ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å",
                                            disable_web_page_preview=True)
    elif code == 'url_mini_desc':
        await callback_query.message.answer(await url.mini_description())
    logging.info(f'{code}:ADMIN:{callback_query.message.from_user.id}:{callback_query.message.from_user.full_name}')


@dp.message_handler(regexp=r'(^\d{6}$)', user_id=admins)
async def delivery_time_by_index(message: types.Message):
    """
        If User message is 6 digit return delivery days
    """
    delivery_response = await pochta_delivery(to_index=message.text)
    await message.answer(delivery_response)
    logging.info(f':ADMIN:{message.from_user.id}:{message.from_user.full_name}')


@dp.message_handler(regexp=r'^(\d{6})(\s{1,})(\d{3,})(\s{1,})(\d{4,})$', user_id=admins)
async def delivery_index_price_weight(message: types.Message):
    """
        If User message is 6 digit index, 3+ digit weight, 4+ digit price return delivery days and price
    """
    to_index, weight, price = message.text.split()
    delivery_response = await pochta_delivery(to_index=to_index, weight=weight, price=price)
    await message.answer(delivery_response)
    logging.info(f':ADMIN:{message.from_user.id}:{message.from_user.full_name}')


@dp.message_handler(regexp=r'^(https?:\/\/)?([\w-]{1,32}\.[\w-]{1,32})[^\s@]*', user_id=admins)
async def url_shortener(message: types.Message):
    """
        If message is URL, then choose url_short or product_description
    """
    kb_inl = await inline_kb_constructor({'–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É': 'url_short',
                                          '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ': 'url_mini_desc'})
    await message.answer(message.text, disable_web_page_preview=True, reply_markup=kb_inl)
    logging.info(f':ADMIN:{message.from_user.id}:{message.from_user.full_name}')


@dp.message_handler(content_types=['photo', 'document'], user_id=admins)
async def barcode_response(message: types.Message):
    """
        –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –Ω–∞ —Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö–∫–æ–¥,
        –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –¥–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
    """
    file_in_io = io.BytesIO()
    if message.content_type == 'photo':
        await message.photo[-1].download(destination_file=file_in_io)
    elif message.content_type == 'document':
        await message.document.download(destination_file=file_in_io)
    msg = await qr_response(file_in_io)
    await message.answer(msg)
    logging.info(f':ADMIN:{message.from_user.id}:{message.from_user.full_name}')


@dp.message_handler(commands=['start', 'help'], user_id=admins)
async def start_help(message: types.Message):
    """
        This handler will be called when user sends `/start` or `/help` command
    """
    message_text = '–í–æ—Ç, —á—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:\n' \
                   '/start , /help - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n' \
                   '\n' \
                   'üåê –°–æ–∫—Ä–∞—â–∞—Ç–µ–ª—å —Å—Å—ã–ª–æ–∫ + –º–∏–Ω–∏ –æ–ø–∏—Å–∞–Ω–∏–µ:\n' \
                   '‚îú <code>https://carautostudio.ru/catalog/shtatnye_magnitoly/</code>\n' \
                   '‚îî –ø—Ä–∏—à–ª–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n' \
                   '\n' \
                   'üìÆ –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏\n' \
                   '‚îú <code>123456</code> - —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É \n' \
                   '‚îî <code>–∏–Ω–¥–µ–∫—Å –≤–µ—Å —Ü–µ–Ω–∞</code> - —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ü–æ—á—Ç—ã –∏ —Å—Ä–æ–∫–∏' \
                   '\n' \
                   'üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ—Å—ã–ª–æ–∫ –ü–æ—á—Ç–∞ —Ä–æ—Å—Å–∏–∏ –∏ –°–î–≠–ö:\n' \
                   '‚îú <code>12345678901234</code> - –¥–ª—è –ü–æ—á—Ç–æ–≤—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å 14 –∑–Ω–∞—á–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\n' \
                   '‚îî <code>RU123456789CH</code> - –¥–ª—è EMS –∏ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π c 13 –∑–Ω–∞—á–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏\n'

    await message.answer(message_text)
    logging.info(f':ADMIN:{message.from_user.id}:{message.from_user.full_name}')
