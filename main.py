import logging
from os import getenv

from src.func import delivery, url_short, mini_description, address_recognition
from aiogram import Bot, Dispatcher, executor, types, filters

logging.basicConfig(level=logging.INFO)
bot = Bot(token=getenv("ASTUDIO_BOT_TOKEN"), parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)


@dp.callback_query_handler(filters.Text(startswith='url'))
async def process_callback_button_url(callback_query: types.CallbackQuery):
    code = callback_query.data
    url = callback_query.message.text
    await callback_query.message.delete()
    if code == 'url1':
        await bot.send_message(callback_query.message.chat.id, url_short(url), disable_web_page_preview=True)
    elif code == 'url2':
        await bot.send_message(callback_query.message.chat.id, mini_description(url))


@dp.message_handler(filters.Regexp(r'^\d{6}$'))
async def delivery_only_index(message: types.Message):
    """
        If User message is 6 digit return delivery days
    """
    delivery_response = delivery(to_index=message.text)
    await message.answer(delivery_response)


@dp.message_handler(filters.Regexp(r'^\d{6}(\s|\S)\d{3,}(\s|\S)\d{4,}$'))
async def delivery_index_price_weight(message: types.Message):
    """
        If User message is 6 digit index, 3+ digit weight, 4+ digit price return delivery days and price
    """
    to_index, weight, price = message.text.split(message.text[6])
    delivery_response = delivery(to_index=to_index, weight=weight, price=price)
    await message.answer(delivery_response)


@dp.message_handler(filters.Regexp(r'^(https?:\/\/)?([\w-]{1,32}\.[\w-]{1,32})[^\s@]*'))
async def url_shortener(message: types.Message):
    """
        If User message is URL, then user choose url_short or product_description
    """
    kb_inl = types.InlineKeyboardMarkup(row_width=2)
    kb_inl.add(types.InlineKeyboardButton('–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É', callback_data=f'url1'))
    kb_inl.add(types.InlineKeyboardButton('–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'url2'))

    await message.answer(message.text, disable_web_page_preview=True, reply_markup=kb_inl)


@dp.message_handler(commands=['start', 'help'])
async def print_menu(message):
    """
        This handler will be called when user sends `/start` or `/help` command
    """
    message_text = '–í–æ—Ç, —á—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:\n' \
                   '/start , /help - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n' \
                   '\n' \
                   'üåê –°–æ–∫—Ä–∞—â–∞—Ç–µ–ª—å —Å—Å—ã–ª–æ–∫ + –º–∏–Ω–∏ –æ–ø–∏—Å–∞–Ω–∏–µ:\n' \
                   '‚îú <code>https://carautostudio.ru/catalog/shtatnye_magnitoly/</code>\n' \
                   '‚îî –ø—Ä–∏—à–ª–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n' \
                   '\n' \
                   'üìÆ –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ (–≤ —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ 2 –¥–Ω—è)\n' \
                   '‚îú <code>123456</code> - —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É \n' \
                   '‚îî <code>–∏–Ω–¥–µ–∫—Å –≤–µ—Å —Ü–µ–Ω–∞</code> - —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ü–æ—á—Ç—ã –∏ —Å—Ä–æ–∫–∏' \
                   '\n' \
                   'üó∫Ô∏è –ê–¥—Ä–µ—Å:\n' \
                   '‚îú <code>–ú–æ—Å–∫–≤–∞ –ú–∞–Ω–µ–∂–Ω–∞—è –ø–ª–æ—â–∞–¥—å 1</code>\n' \
                   '‚îî —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å, –∏–Ω–¥–µ–∫—Å –∏ —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –ü–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏'

    await message.answer(message_text)


@dp.message_handler()
async def address_string_message(message: types.Message):
    token = getenv('DADATA_TOKEN')
    secret = getenv('DADATA_SECRET')
    address = address_recognition(full_address_str=message.text, token=token, secret=secret)
    text = f'{address}\n' \
           f'{delivery(address[:6])}'
    await message.answer(text)


'''@dp.message_handler()
async def echo(message: types.Message):
    """
    echo
    """
    await message.answer(message.text)'''

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
